"use strict";(self.webpackChunkmybooks=self.webpackChunkmybooks||[]).push([[580],{663:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var t=s(4848),r=s(8453);const i={},a=void 0,l={id:"Craftinginterpreters/not-translated-yet/appendix-ii",title:"appendix-ii",description:"For your edification, here is the code produced by [the little script",source:"@site/docs/Craftinginterpreters/not-translated-yet/appendix-ii.md",sourceDirName:"Craftinginterpreters/not-translated-yet",slug:"/Craftinginterpreters/not-translated-yet/appendix-ii",permalink:"/docs/Craftinginterpreters/not-translated-yet/appendix-ii",draft:!1,unlisted:!1,editUrl:"https://github.com/jabberwocky238/jabberwocky238.github.io/docs/Craftinginterpreters/not-translated-yet/appendix-ii.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"appendix-i",permalink:"/docs/Craftinginterpreters/not-translated-yet/appendix-i"},next:{title:"backmatter",permalink:"/docs/Craftinginterpreters/not-translated-yet/backmatter"}},d={},o=[{value:"Expressions",id:"expressions",level:2},{value:"Assign expression",id:"assign-expression",level:3},{value:"Binary expression",id:"binary-expression",level:3},{value:"Call expression",id:"call-expression",level:3},{value:"Get expression",id:"get-expression",level:3},{value:"Grouping expression",id:"grouping-expression",level:3},{value:"Literal expression",id:"literal-expression",level:3},{value:"Logical expression",id:"logical-expression",level:3},{value:"Set expression",id:"set-expression",level:3},{value:"Super expression",id:"super-expression",level:3},{value:"This expression",id:"this-expression",level:3},{value:"Unary expression",id:"unary-expression",level:3},{value:"Variable expression",id:"variable-expression",level:3},{value:"Statements",id:"statements",level:2},{value:"Block statement",id:"block-statement",level:3},{value:"Class statement",id:"class-statement",level:3},{value:"Expression statement",id:"expression-statement",level:3},{value:"Function statement",id:"function-statement",level:3},{value:"If statement",id:"if-statement",level:3},{value:"Print statement",id:"print-statement",level:3},{value:"Return statement",id:"return-statement",level:3},{value:"Variable statement",id:"variable-statement",level:3},{value:"While statement",id:"while-statement",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["For your edification, here is the code produced by ",(0,t.jsx)(n.a,{href:"representing-code.html#metaprogramming-the-trees",children:"the little script\r\nwe built"})," to automate generating the syntax tree classes for jlox."]}),"\n",(0,t.jsx)(n.h2,{id:"expressions",children:"Expressions"}),"\n",(0,t.jsxs)(n.p,{children:['Expressions are the first syntax tree nodes we see, introduced in "',(0,t.jsx)(n.a,{href:"representing-code.html",children:"Representing\r\nCode"}),'". The main Expr class defines the visitor\r\ninterface used to dispatch against the specific expression types, and contains\r\nthe other expression subclasses as nested classes.']}),"\n",(0,t.jsx)(n.p,{children:"^code expr"}),"\n",(0,t.jsx)(n.h3,{id:"assign-expression",children:"Assign expression"}),"\n",(0,t.jsxs)(n.p,{children:['Variable assignment is introduced in "',(0,t.jsx)(n.a,{href:"statements-and-state.html#assignment",children:"Statements and\r\nState"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-assign"}),"\n",(0,t.jsx)(n.h3,{id:"binary-expression",children:"Binary expression"}),"\n",(0,t.jsxs)(n.p,{children:['Binary operators are introduced in "',(0,t.jsx)(n.a,{href:"representing-code.html",children:"Representing\r\nCode"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-binary"}),"\n",(0,t.jsx)(n.h3,{id:"call-expression",children:"Call expression"}),"\n",(0,t.jsxs)(n.p,{children:['Function call expressions are introduced in\r\n"',(0,t.jsx)(n.a,{href:"functions.html#function-calls",children:"Functions"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-call"}),"\n",(0,t.jsx)(n.h3,{id:"get-expression",children:"Get expression"}),"\n",(0,t.jsxs)(n.p,{children:['Property access, or "get" expressions are introduced in\r\n"',(0,t.jsx)(n.a,{href:"classes.html#properties-on-instances",children:"Classes"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-get"}),"\n",(0,t.jsx)(n.h3,{id:"grouping-expression",children:"Grouping expression"}),"\n",(0,t.jsxs)(n.p,{children:['Using parentheses to group expressions is introduced in "',(0,t.jsx)(n.a,{href:"representing-code.html",children:"Representing\r\nCode"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-grouping"}),"\n",(0,t.jsx)(n.h3,{id:"literal-expression",children:"Literal expression"}),"\n",(0,t.jsxs)(n.p,{children:['Literal value expressions are introduced in "',(0,t.jsx)(n.a,{href:"representing-code.html",children:"Representing\r\nCode"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-literal"}),"\n",(0,t.jsx)(n.h3,{id:"logical-expression",children:"Logical expression"}),"\n",(0,t.jsxs)(n.p,{children:["The logical ",(0,t.jsx)(n.code,{children:"and"})," and ",(0,t.jsx)(n.code,{children:"or"}),' operators are introduced in "',(0,t.jsx)(n.a,{href:"control-flow.html#logical-operators",children:"Control\r\nFlow"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-logical"}),"\n",(0,t.jsx)(n.h3,{id:"set-expression",children:"Set expression"}),"\n",(0,t.jsxs)(n.p,{children:['Property assignment, or "set" expressions are introduced in\r\n"',(0,t.jsx)(n.a,{href:"classes.html#properties-on-instances",children:"Classes"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-set"}),"\n",(0,t.jsx)(n.h3,{id:"super-expression",children:"Super expression"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"super"}),' expression is introduced in\r\n"',(0,t.jsx)(n.a,{href:"inheritance.html#calling-superclass-methods",children:"Inheritance"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-super"}),"\n",(0,t.jsx)(n.h3,{id:"this-expression",children:"This expression"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"this"}),' expression is introduced in "',(0,t.jsx)(n.a,{href:"classes.html#this",children:"Classes"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-this"}),"\n",(0,t.jsx)(n.h3,{id:"unary-expression",children:"Unary expression"}),"\n",(0,t.jsxs)(n.p,{children:['Unary operators are introduced in "',(0,t.jsx)(n.a,{href:"representing-code.html",children:"Representing Code"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-unary"}),"\n",(0,t.jsx)(n.h3,{id:"variable-expression",children:"Variable expression"}),"\n",(0,t.jsxs)(n.p,{children:['Variable access expressions are introduced in "',(0,t.jsx)(n.a,{href:"statements-and-state.html#variable-syntax",children:"Statements and\r\nState"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code expr-variable"}),"\n",(0,t.jsx)(n.h2,{id:"statements",children:"Statements"}),"\n",(0,t.jsxs)(n.p,{children:['Statements form a second hierarchy of syntax tree nodes independent of\r\nexpressions. We add the first couple of them in "',(0,t.jsx)(n.a,{href:"statements-and-state.html",children:"Statements and\r\nState"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt"}),"\n",(0,t.jsx)(n.h3,{id:"block-statement",children:"Block statement"}),"\n",(0,t.jsxs)(n.p,{children:['The curly-braced block statement that defines a local scope is introduced in\r\n"',(0,t.jsx)(n.a,{href:"statements-and-state.html#block-syntax-and-semantics",children:"Statements and State"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-block"}),"\n",(0,t.jsx)(n.h3,{id:"class-statement",children:"Class statement"}),"\n",(0,t.jsxs)(n.p,{children:['Class declarations are introduced in, unsurprisingly,\r\n"',(0,t.jsx)(n.a,{href:"classes.html#class-declarations",children:"Classes"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-class"}),"\n",(0,t.jsx)(n.h3,{id:"expression-statement",children:"Expression statement"}),"\n",(0,t.jsxs)(n.p,{children:['The expression statement is introduced in "',(0,t.jsx)(n.a,{href:"statements-and-state.html#statements",children:"Statements and\r\nState"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-expression"}),"\n",(0,t.jsx)(n.h3,{id:"function-statement",children:"Function statement"}),"\n",(0,t.jsxs)(n.p,{children:['Function declarations are introduced in, you guessed it,\r\n"',(0,t.jsx)(n.a,{href:"functions.html#function-declarations",children:"Functions"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-function"}),"\n",(0,t.jsx)(n.h3,{id:"if-statement",children:"If statement"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"if"}),' statement is introduced in "',(0,t.jsx)(n.a,{href:"control-flow.html#conditional-execution",children:"Control\r\nFlow"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-if"}),"\n",(0,t.jsx)(n.h3,{id:"print-statement",children:"Print statement"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"print"}),' statement is introduced in "',(0,t.jsx)(n.a,{href:"statements-and-state.html#statements",children:"Statements and\r\nState"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-print"}),"\n",(0,t.jsx)(n.h3,{id:"return-statement",children:"Return statement"}),"\n",(0,t.jsxs)(n.p,{children:["You need a function to return from, so ",(0,t.jsx)(n.code,{children:"return"}),' statements are introduced in\r\n"',(0,t.jsx)(n.a,{href:"functions.html#return-statements",children:"Functions"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-return"}),"\n",(0,t.jsx)(n.h3,{id:"variable-statement",children:"Variable statement"}),"\n",(0,t.jsxs)(n.p,{children:['Variable declarations are introduced in "',(0,t.jsx)(n.a,{href:"statements-and-state.html#variable-syntax",children:"Statements and\r\nState"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-var"}),"\n",(0,t.jsx)(n.h3,{id:"while-statement",children:"While statement"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"while"}),' statement is introduced in "',(0,t.jsx)(n.a,{href:"control-flow.html#while-loops",children:"Control\r\nFlow"}),'".']}),"\n",(0,t.jsx)(n.p,{children:"^code stmt-while"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(6540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);