"use strict";(self.webpackChunkjabberwocky238_github_io=self.webpackChunkjabberwocky238_github_io||[]).push([[2476],{84653:(n,r,i)=>{i.r(r),i.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var e=i(74848),t=i(28453);const o={},s="USB",a={id:"ESP8266CH430C",title:"USB",description:"KeyBoard",source:"@site/docs/MCU/12-ESP8266CH430C.md",sourceDirName:".",slug:"/ESP8266CH430C",permalink:"/MCU/ESP8266CH430C",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"units",permalink:"/MCU/Arduino-R3"}},d={},c=[{value:"KeyBoard",id:"keyboard",level:2},{value:"WIFI",id:"wifi",level:2},{value:"1. STA\u6a21\u5f0f\uff08Station\u6a21\u5f0f\uff09",id:"1-sta\u6a21\u5f0fstation\u6a21\u5f0f",level:3},{value:"2. AP\u6a21\u5f0f\uff08Access Point\u6a21\u5f0f\uff09",id:"2-ap\u6a21\u5f0faccess-point\u6a21\u5f0f",level:3},{value:"3. STA+AP\u6a21\u5f0f\uff08\u540c\u65f6\u4f5c\u4e3a\u5ba2\u6237\u7aef\u548c\u8def\u7531\u5668\uff09",id:"3-staap\u6a21\u5f0f\u540c\u65f6\u4f5c\u4e3a\u5ba2\u6237\u7aef\u548c\u8def\u7531\u5668",level:3}];function l(n){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r.header,{children:(0,e.jsx)(r.h1,{id:"usb",children:"USB"})}),"\n",(0,e.jsx)(r.h2,{id:"keyboard",children:"KeyBoard"}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-cpp",children:'/*\r\n  Keyboard Message test\r\n\r\n  For the Arduino Leonardo and Micro.\r\n\r\n  Sends a text string when a button is pressed.\r\n\r\n  The circuit:\r\n  - pushbutton attached from pin 4 to +5V\r\n  - 10 kilohm resistor attached from pin 4 to ground\r\n\r\n  created 24 Oct 2011\r\n  modified 27 Mar 2012\r\n  by Tom Igoe\r\n  modified 11 Nov 2013\r\n  by Scott Fitzgerald\r\n\r\n  This example code is in the public domain.\r\n\r\n  https://www.arduino.cc/en/Tutorial/BuiltInExamples/KeyboardMessage\r\n*/\r\n\r\n#include "Keyboard.h"\r\n\r\nconst int buttonPin = 4;         // input pin for pushbutton\r\nint previousButtonState = HIGH;  // for checking the state of a pushButton\r\nint counter = 0;                 // button push counter\r\n\r\nvoid setup() {\r\n    // make the pushButton pin an input:\r\n    pinMode(buttonPin, INPUT);\r\n    // initialize control over the keyboard:\r\n    Keyboard.begin();\r\n}\r\n\r\nvoid loop() {\r\n    // read the pushbutton:\r\n    int buttonState = digitalRead(buttonPin);\r\n    // if the button state has changed,\r\n    if ((buttonState != previousButtonState)\r\n        // and it\'s currently pressed:\r\n        && (buttonState == HIGH)) {\r\n        // increment the button counter\r\n        counter++;\r\n        // type out a message\r\n        Keyboard.print("You pressed the button ");\r\n        Keyboard.print(counter);\r\n        Keyboard.println(" times.");\r\n    }\r\n    // save the current button state for comparison next time:\r\n    previousButtonState = buttonState;\r\n}\r\n\n'})}),"\n",(0,e.jsx)(r.h2,{id:"wifi",children:"WIFI"}),"\n",(0,e.jsx)(r.p,{children:"ESP8266\u662f\u4e00\u6b3e\u975e\u5e38\u6d41\u884c\u7684Wi-Fi\u6a21\u5757\uff0c\u5b83\u53ef\u4ee5\u5de5\u4f5c\u5728\u4e0d\u540c\u7684\u6a21\u5f0f\u4e0b\uff0c\u5982Station\uff08STA\uff09\u6a21\u5f0f\u3001Access Point\uff08AP\uff09\u6a21\u5f0f\uff0c\u4ee5\u53ca\u4e24\u8005\u7684\u7ed3\u5408\uff08STA+AP\uff09\u6a21\u5f0f\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u57fa\u672c\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u5728\u4e0d\u540c\u6a21\u5f0f\u4e0b\u4f7f\u7528ESP8266\u8fdb\u884cWiFi\u8fde\u63a5\u3002"}),"\n",(0,e.jsx)(r.h3,{id:"1-sta\u6a21\u5f0fstation\u6a21\u5f0f",children:"1. STA\u6a21\u5f0f\uff08Station\u6a21\u5f0f\uff09"}),"\n",(0,e.jsx)(r.p,{children:"\u5728STA\u6a21\u5f0f\u4e0b\uff0cESP8266\u4f5c\u4e3a\u4e00\u4e2a\u65e0\u7ebf\u7f51\u7edc\u7684\u5ba2\u6237\u7aef\uff0c\u8fde\u63a5\u5230\u4e00\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\uff08WiFi\u70ed\u70b9\uff09\u3002"}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-cpp",children:'#include <ESP8266WiFi.h>\r\n\r\nconst char* ssid     = "\u4f60\u7684WiFi\u540d\u79f0";     // \u9700\u8981\u8fde\u63a5\u7684WiFi\u540d\r\nconst char* password = "\u4f60\u7684WiFi\u5bc6\u7801";     // \u8fde\u63a5\u7684WiFi\u5bc6\u7801\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);                         // \u521d\u59cb\u5316\u4e32\u53e3\u901a\u8baf\u6ce2\u7279\u7387\u4e3a115200\r\n  WiFi.mode(WIFI_STA);                          // \u8bbe\u7f6eWifi\u5de5\u4f5c\u6a21\u5f0f\u4e3aSTA\r\n  WiFi.begin(ssid, password);                   // \u901a\u8fc7wifi\u540d\u548c\u5bc6\u7801\u8fde\u63a5\u5230Wifi\r\n  Serial.print("Connecting to ");                // \u4e32\u53e3\u76d1\u89c6\u5668\u8f93\u51fa\u7f51\u7edc\u8fde\u63a5\u4fe1\u606f\r\n  Serial.print(ssid); Serial.println(" ...");   // \u663e\u793aESP8266\u6b63\u5728\u5c1d\u8bd5WiFi\u8fde\u63a5\r\n\r\n  while (WiFi.status() != WL_CONNECTED) {      // \u5982\u679cWiFi\u8fde\u63a5\u6210\u529f\u5219\u8fd4\u56de\u503c\u4e3aWL_CONNECTED\r\n    delay(1000);                                // \u6b64\u5904\u901a\u8fc7While\u5faa\u73af\u8ba9ESP8266\u6bcf\u9694\u4e00\u79d2\u949f\u68c0\u67e5\u4e00\u6b21WiFi.status()\u51fd\u6570\u8fd4\u56de\u503c\r\n    Serial.print("waiting for ");\r\n    Serial.print(i++); Serial.println("s...");\r\n  }\r\n\r\n  Serial.println("WiFi connected!");             // ESP8266\u5c06\u901a\u8fc7\u4e32\u53e3\u76d1\u89c6\u5668\u8f93\u51fa"\u8fde\u63a5\u6210\u529f"\u4fe1\u606f\u3002\r\n  Serial.print("IP address: ");                 // \u540c\u65f6\u8fd8\u5c06\u8f93\u51faESP8266\u7684IP\u5730\u5740\u3002\r\n  Serial.println(WiFi.localIP());               // \u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5373ESP8266\u7684IP\u5730\u5740\u3002\r\n}\r\n\r\nvoid loop() {\r\n  // \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u4f60\u7684\u4ee3\u7801\r\n}\n'})}),"\n",(0,e.jsx)(r.h3,{id:"2-ap\u6a21\u5f0faccess-point\u6a21\u5f0f",children:"2. AP\u6a21\u5f0f\uff08Access Point\u6a21\u5f0f\uff09"}),"\n",(0,e.jsx)(r.p,{children:"\u5728AP\u6a21\u5f0f\u4e0b\uff0cESP8266\u4f5c\u4e3a\u4e00\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\uff0c\u5176\u4ed6\u8bbe\u5907\u53ef\u4ee5\u8fde\u63a5\u5230\u5b83\u3002"}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-cpp",children:'#include <ESP8266WiFi.h>\r\n\r\n#define AP_SSID "ESP8266_wang"      // SSID\r\n#define AP_PSW "12345678"           // PASSWD 8\u4f4d\u4ee5\u4e0a\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  WiFi.mode(WIFI_AP);               // \u8bbe\u7f6eWIFI\u6a21\u5f0f\u4e3aAP\u6a21\u5f0f\r\n  WiFi.softAP(AP_SSID, AP_PSW);     // \u8bbe\u7f6e\u8d26\u53f7\u548c\u5bc6\u7801\r\n\r\n  Serial.print("Soft-AP IP \u5730\u5740\u662f: ");\r\n  Serial.println(WiFi.softAPIP().toString());\r\n}\r\n\r\nvoid loop() {\r\n  // \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u4f60\u7684\u4ee3\u7801\r\n}\n'})}),"\n",(0,e.jsx)(r.h3,{id:"3-staap\u6a21\u5f0f\u540c\u65f6\u4f5c\u4e3a\u5ba2\u6237\u7aef\u548c\u8def\u7531\u5668",children:"3. STA+AP\u6a21\u5f0f\uff08\u540c\u65f6\u4f5c\u4e3a\u5ba2\u6237\u7aef\u548c\u8def\u7531\u5668\uff09"}),"\n",(0,e.jsx)(r.p,{children:"\u5728STA+AP\u6a21\u5f0f\u4e0b\uff0cESP8266\u65e2\u53ef\u4ee5\u8fde\u63a5\u5230\u4e00\u4e2a\u65e0\u7ebf\u8def\u7531\u5668\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u65e0\u7ebf\u8def\u7531\u5668\u8ba9\u5176\u4ed6\u8bbe\u5907\u8fde\u63a5\u3002"}),"\n",(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{className:"language-cpp",children:'#include <ESP8266WiFi.h>\r\n\r\nconst char* ssid     = "\u4f60\u7684WiFi\u540d\u79f0";          // \u9700\u8981\u8fde\u63a5\u7684WiFi\u540d\r\nconst char* password = "\u4f60\u7684WiFi\u5bc6\u7801";          // \u8fde\u63a5\u7684WiFi\u5bc6\u7801\r\n#define AP_SSID "ESP8266_wang"                 // AP\u6a21\u5f0f\u4e0b\u7684SSID\r\n#define AP_PSW "12345678"                      // AP\u6a21\u5f0f\u4e0b\u7684\u5bc6\u7801\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  WiFi.mode(WIFI_AP_STA);                     // \u8bbe\u7f6eWIFI\u6a21\u5f0f\u4e3aSTA+AP\r\n  WiFi.softAP(AP_SSID, AP_PSW);               // \u5f00\u542fAP\u6a21\u5f0f\r\n\r\n  WiFi.begin(ssid, password);                 // \u5c1d\u8bd5\u8fde\u63a5\u5230WiFi\u7f51\u7edc\r\n  Serial.print("Connecting to ");\r\n  Serial.print(ssid); Serial.println(" ...");\r\n\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(1000);\r\n    Serial.print("waiting for ");\r\n    Serial.print(i++); Serial.println("s...");\r\n  }\r\n\r\n  Serial.println("WiFi connected!");\r\n  Serial.print("IP address: ");\r\n  Serial.println(WiFi.localIP());\r\n}\r\n\r\nvoid loop() {\r\n  // \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u4f60\u7684\u4ee3\u7801\r\n}\n'})}),"\n",(0,e.jsx)(r.p,{children:"\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u4ee3\u7801\u793a\u4f8b\u9700\u8981\u6839\u636e\u4f60\u7684\u5b9e\u9645WiFi\u7f51\u7edc\u4fe1\u606f\u8fdb\u884c\u4fee\u6539\uff0c\u5305\u62ecWiFi\u7684SSID\u548c\u5bc6\u7801\u3002\u6b64\u5916\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b89\u88c5ESP8266\u7684\u5f00\u53d1\u677f\u7ba1\u7406\u5668\u548c\u5e93\u5230\u4f60\u7684Arduino IDE\u4e2d\uff0c\u4ee5\u4fbf\u7f16\u8bd1\u548c\u4e0a\u4f20\u4ee3\u7801\u5230ESP8266\u6a21\u5757\u3002\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\u548c\u9ad8\u7ea7\u7528\u6cd5\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003ESP8266\u7684\u5b98\u65b9\u6587\u6863\u548c\u793e\u533a\u8bba\u575b\u3002"})]})}function p(n={}){const{wrapper:r}={...(0,t.R)(),...n.components};return r?(0,e.jsx)(r,{...n,children:(0,e.jsx)(l,{...n})}):l(n)}},28453:(n,r,i)=>{i.d(r,{R:()=>s,x:()=>a});var e=i(96540);const t={},o=e.createContext(t);function s(n){const r=e.useContext(o);return e.useMemo((function(){return"function"==typeof n?n(r):{...r,...n}}),[r,n])}function a(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),e.createElement(o.Provider,{value:r},n.children)}}}]);